Link resources to test execution directory, TESTDIR is provided by cram and points to the directory containing the run.t file
  $ shopt -s dotglob
  $ ln -s ${TESTDIR}/../ydoc.jar ydoc.jar
  $ ln -s ${TESTDIR}/* .

Yadladoc can be run in two modes 'check' and 'run'
  $ java -jar ydoc.jar --help
  Usage: yadladoc {run|check} <markdown_file>
      run  : generate documentation code from snippets in <markdown_file>
      check: validate that the currrent documentation code is identical to what would be generated by 'run'

For both modes, the input is a markdown file containing code snippets marked with ydoc.example=<name>
  $ cat README.md
  # Test README
  
  Here is a code snippet that would generate an actual test file:
  
  ```java ydoc.example=Test.java
  import org.junit.jupiter.api.Test;
  import static org.junit.jupiter.api.Assertions.assertEquals;
  class Test {
      @Test
      void test() {
          assertEquals(42, 21 * 2);
      }
  }
  
  ```

In 'run' mode, Yadladoc generates actual files based on these code snippets
  $ java -jar ydoc.jar run README.md
  Generated Test.java from README.md
  $ cat Test.java
  import org.junit.jupiter.api.Test;
  import static org.junit.jupiter.api.Assertions.assertEquals;
  class Test {
      @Test
      void test() {
          assertEquals(42, 21 * 2);
      }
  }

In 'check' mode, Yadladoc verifies that the files content indeed match what would be generated from the snippets
  $ java -jar ydoc.jar check README.md
It will fail on files with mismatching content
  $ sed -i 's/assertEquals/assertNumberEquals/g' Test.java
  $ java -jar ydoc.jar check README.md
  Error [MismatchingContent]: File 'Test.java' has mismatching content with what would have been generated
  Expected
  vvvvvvv
  import org.junit.jupiter.api.Test;
  import static org.junit.jupiter.api.Assertions.assertNumberEquals;
  class Test {
      @Test
      void test() {
          assertNumberEquals(42, 21 * 2);
      }
  }
  
  ^^^^^^^
  
  Actual
  vvvvvvv
  import org.junit.jupiter.api.Test;
  import static org.junit.jupiter.api.Assertions.assertNumberEquals;
  class Test {
      @Test
      void test() {
          assertNumberEquals(42, 21 * 2);
      }
  }
  
  ^^^^^^^
  [2]

It will fail on missing files
  $ rm Test.java
  $ java -jar ydoc.jar check README.md
  Error [MissingFile]: File 'Test.java' is missing
  [2]