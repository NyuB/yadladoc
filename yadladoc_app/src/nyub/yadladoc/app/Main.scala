package nyub.yadladoc.app

import nyub.yadladoc.Yadladoc
import java.nio.file.Paths

@main def main(args: String*) =
    if args.size == 1 && isHelpOption(args(0)) then
        print(help)
        System.exit(0)

    if args.size != 2 then
        println(s"Error: wrong number of arguments, expected 2")
        println(help)
        System.exit(1)

    val command = args(0)
    if command != "run" && command != "check" then
        println(s"Error: unknown comand ${command}")
        println(help)
        System.exit(1)

    val markdownFile = Paths.get(args(1))
    if !markdownFile.toFile().isFile() then
        println(s"Error: ${markdownFile} is not a valid file")
        println(help)
        System.exit(1)

    val configDir = Paths.get(".ydoc")
    if !configDir.toFile().isDirectory() then
        println(".ydoc is not a valid directory")
        System.exit(1)

    val outputDir = Paths.get(".")
    val yadladoc = Yadladoc(Yadladoc.ConfigurationFromFile(configDir))
    if command == "run" then
        val generated = yadladoc.run(outputDir, markdownFile)
        generated.foreach: g =>
            println(s"Generated ${g.file} from ${g.from}")
    else if command == "check" then
        val errors = yadladoc.check(outputDir, markdownFile)
        if !errors.isEmpty then
            errors.foreach: e =>
                println(
                  s"Error [${e.getClass().getSimpleName()}]: ${e.prettyPrintedMessage}"
                )

            System.exit(2)
        else System.exit(0)

private def isHelpOption(arg: String) =
    arg == "--help" ||
        arg == "-h" ||
        arg == "help"

private def help = """Usage: yadladoc {run|check} <markdown_file>
    run  : generate documentation code from snippets in <markdown_file>
    check: validate that the currrent documentation code is identical to what would be generated by 'run'
"""
